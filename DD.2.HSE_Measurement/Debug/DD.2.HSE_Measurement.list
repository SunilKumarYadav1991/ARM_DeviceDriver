
DD.2.HSE_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011b  00000000  00000000  0001036a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000008d  00000000  00000000  00010485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f46  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000043c  00000000  00000000  000114d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003bec  00000000  00000000  00011912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000154fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000320 	.word	0x08000320

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000320 	.word	0x08000320

080001d8 <main>:
#define GPIOA_BASE_ADDR           0x40020000UL                             /* Base address of GPIO A*/
#define RCC_CR_REG_OFFSET         0x00UL                                   /* RCC Clock configuration register offset*/
#define RCC_CR_REG_ADDR            (RCC_BASE_ADDR + RCC_CR_REG_OFFSET )    /* RCC Clock configuration register*/

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0


	volatile uint32_t *pRccCfgrReg = (volatile uint32_t*)RCC_CFGR_REG_ADDR;
 80001de:	4b24      	ldr	r3, [pc, #144]	; (8000270 <main+0x98>)
 80001e0:	617b      	str	r3, [r7, #20]
	volatile uint32_t *pRccCrReg = (volatile uint32_t*)RCC_CR_REG_ADDR;       /* RCC Clock configuration register*/
 80001e2:	4b24      	ldr	r3, [pc, #144]	; (8000274 <main+0x9c>)
 80001e4:	613b      	str	r3, [r7, #16]

    //---------------------------------------------------------------------------------------------------------------
	// 1. Enable the HSE clock using HSEON bit RCC Clock configuration register (RCC_CR)
	*pRccCrReg |= (1 << 16);
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	601a      	str	r2, [r3, #0]

	// 2. Wait till external crystal clock (HSE) is stabilized
	while( !(*pRccCrReg & (1 << 17) ) );     /* HSERDY: HSE clock ready flag. 1: Oscillator clock ready and 0: Oscillator clock not ready*/
 80001f2:	bf00      	nop
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f9      	beq.n	80001f4 <main+0x1c>

	// 3. switch the system clock to HSE using RCC clock configuration register
    *pRccCfgrReg |= (1<<0);                 /* System Clock Switch (SW)Bit 1:0 => 01: HSE oscillator selected as system clock*/
 8000200:	697b      	ldr	r3, [r7, #20]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 0201 	orr.w	r2, r3, #1
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	601a      	str	r2, [r3, #0]
    // MCO1 setting for measurement via Logic analyzer


    // 1. Configure the RCC_CFGR MCO1 bit fields to select HSI as clock source

	*pRccCfgrReg |= (1 << 22);                    /* bit 22:21 => 00: HSI clock selected, 01: LSE oscillator selected
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	601a      	str	r2, [r3, #0]
	                                                  10: HSE oscillator clock selected, 01: LSE oscillator selected*/

	*pRccCfgrReg  |= (1 << 25);                     /* configure MCO1 prescaler: bit 25-26 = 1 --> MCO = System clock(HSI 16MHz)/4 == 4MHZ*/
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg  |= (1 << 26);
 8000224:	697b      	ldr	r3, [r7, #20]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	601a      	str	r2, [r3, #0]


	// 2. Configure PA8 pin to AF0 mode (alternate mode) to behave as MCO1 signal. Refer datasheet for more details
	// 2.1 Before accessing any peripheral/GPIO, we need to enable respective bus on which its connected. GPIO connected to AHB1bus
	volatile uint32_t *pRccAbh1Enr = (volatile uint32_t*)(RCC_BASE_ADDR + 0x30);
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <main+0xa0>)
 8000232:	60fb      	str	r3, [r7, #12]
	*pRccAbh1Enr  |= (1 << 0);                     /* enable GPIO A peripheral clock*/
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f043 0201 	orr.w	r2, r3, #1
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]

	// 2.2 Configure the mode of GPIOA pin 8 as alternate function mode
	volatile uint32_t *pGPIOAModeReg = (volatile uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <main+0xa4>)
 8000242:	60bb      	str	r3, [r7, #8]
	*pGPIOAModeReg &= ~(0x3 << 16);              /*clear*/
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= (0x2 << 16);               /*set bit 16:17 GPIO A8. 10: Alternate function mode, 11: Analog mode etc*/
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	601a      	str	r2, [r3, #0]

	// 2.3 Configure the alternation function register to set the mode 0 for PA8
	volatile uint32_t *pGPIOAAltFunctionHighReg = (volatile uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0xa8>)
 800025e:	607b      	str	r3, [r7, #4]
	*pGPIOAAltFunctionHighReg &= ~(0xf << 0);         /*0000:AF0 .. 1111:AF15*/
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f023 020f 	bic.w	r2, r3, #15
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	601a      	str	r2, [r3, #0]

	for(;;);
 800026c:	e7fe      	b.n	800026c <main+0x94>
 800026e:	bf00      	nop
 8000270:	40023808 	.word	0x40023808
 8000274:	40023800 	.word	0x40023800
 8000278:	40023830 	.word	0x40023830
 800027c:	40020000 	.word	0x40020000
 8000280:	40020024 	.word	0x40020024

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff8f 	bl	80001d8 <main>

080002ba <LoopForever>:

LoopForever:
    b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4d0d      	ldr	r5, [pc, #52]	; (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2600      	movs	r6, #0
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4d0b      	ldr	r5, [pc, #44]	; (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	; (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2600      	movs	r6, #0
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
