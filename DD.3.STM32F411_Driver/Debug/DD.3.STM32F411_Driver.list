
DD.3.STM32F411_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007cc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000964  0800096c  0001096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000964  08000964  0001096c  2**0
                  CONTENTS
  4 .ARM          00000000  08000964  08000964  0001096c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000964  0800096c  0001096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000964  08000964  00010964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000968  08000968  00010968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800096c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800096c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001096c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000acb  00000000  00000000  00010996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000029b  00000000  00000000  00011461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00011700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  000117c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c2  00000000  00000000  00011880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f74  00000000  00000000  00013942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000085cc  00000000  00000000  000148b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001ce82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001ced4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800094c 	.word	0x0800094c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800094c 	.word	0x0800094c

080001d8 <GPIO_PeriClockControl>:
/**
 * GPIO_PeriClockControl() function enables or disables peripheral clock for given GPIO port
 * @param pGPIOx            base address of GPIO peripheral
 * @param enableOrDisable   boolean 1 to enable/set and 0 to disable/reset
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enableOrDisable){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]

	if(enableOrDisable== ENABLE) {
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d141      	bne.n	800026e <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA) {
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a43      	ldr	r2, [pc, #268]	; (80002fc <GPIO_PeriClockControl+0x124>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001f2:	4b43      	ldr	r3, [pc, #268]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a42      	ldr	r2, [pc, #264]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
			// wrong port address
		}

	}

}
 80001fe:	e077      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a40      	ldr	r2, [pc, #256]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b3d      	ldr	r3, [pc, #244]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a3c      	ldr	r2, [pc, #240]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e06c      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b38      	ldr	r3, [pc, #224]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a37      	ldr	r2, [pc, #220]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e061      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <GPIO_PeriClockControl+0x134>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b32      	ldr	r3, [pc, #200]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a31      	ldr	r2, [pc, #196]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e056      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a32      	ldr	r2, [pc, #200]	; (8000310 <GPIO_PeriClockControl+0x138>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e04b      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d147      	bne.n	80002f0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a26      	ldr	r2, [pc, #152]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e040      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA) {
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a22      	ldr	r2, [pc, #136]	; (80002fc <GPIO_PeriClockControl+0x124>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000276:	4b22      	ldr	r3, [pc, #136]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800027c:	f023 0301 	bic.w	r3, r3, #1
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e035      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800028c:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000292:	f023 0302 	bic.w	r3, r3, #2
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e02a      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002a8:	f023 0304 	bic.w	r3, r3, #4
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e01f      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a16      	ldr	r2, [pc, #88]	; (800030c <GPIO_PeriClockControl+0x134>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002be:	f023 0308 	bic.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e014      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <GPIO_PeriClockControl+0x138>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002d4:	f023 0310 	bic.w	r3, r3, #16
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e009      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d105      	bne.n	80002f0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000
 8000300:	40023800 	.word	0x40023800
 8000304:	40020400 	.word	0x40020400
 8000308:	40020800 	.word	0x40020800
 800030c:	40020c00 	.word	0x40020c00
 8000310:	40021000 	.word	0x40021000
 8000314:	40021c00 	.word	0x40021c00

08000318 <GPIO_Init>:
 * GPIO_Init() function initializes the GPIO port with respective mode
 * @param pGPIOHandle      GPIO handle with base address to GPIO with respective mode
 *
 * TODO: Interrupt mode implementation pending
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
	uint8_t pinNumber = pGPIOHandle->GPIO_pinConfig.GPIO_PinNumber;             // pin number of port for which initialization is required
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	791b      	ldrb	r3, [r3, #4]
 8000328:	74fb      	strb	r3, [r7, #19]

	//1. Configure the mode of gpio pin: focusing on non interrupt modes as of now
	if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode <= GPIO_MODE_AALOG) {           // non interrupt mode.
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	795b      	ldrb	r3, [r3, #5]
 800032e:	2b03      	cmp	r3, #3
 8000330:	d81f      	bhi.n	8000372 <GPIO_Init+0x5a>

		temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinMode << (2*pinNumber);      // Configure respective pin mode field.  2bit per pin hence multiply by 2
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	795b      	ldrb	r3, [r3, #5]
 8000336:	461a      	mov	r2, r3
 8000338:	7cfb      	ldrb	r3, [r7, #19]
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pinNumber);                     // Reset/clear existing value
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	7cfb      	ldrb	r3, [r7, #19]
 800034a:	2103      	movs	r1, #3
 800034c:	fa01 f303 	lsl.w	r3, r1, r3
 8000350:	43db      	mvns	r3, r3
 8000352:	4619      	mov	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	400a      	ands	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;                                     // write MODER register value to respective GPIO register
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6819      	ldr	r1, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	697a      	ldr	r2, [r7, #20]
 8000368:	430a      	orrs	r2, r1
 800036a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	e098      	b.n	80004a4 <GPIO_Init+0x18c>
	} else {

		// clear rising and falling trigger selection register before setting them.
		EXTI->FTSR &= ~(1 << pinNumber);
 8000372:	4b9c      	ldr	r3, [pc, #624]	; (80005e4 <GPIO_Init+0x2cc>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	7cfa      	ldrb	r2, [r7, #19]
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f202 	lsl.w	r2, r1, r2
 800037e:	43d2      	mvns	r2, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a98      	ldr	r2, [pc, #608]	; (80005e4 <GPIO_Init+0x2cc>)
 8000384:	400b      	ands	r3, r1
 8000386:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 8000388:	4b96      	ldr	r3, [pc, #600]	; (80005e4 <GPIO_Init+0x2cc>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	7cfa      	ldrb	r2, [r7, #19]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a92      	ldr	r2, [pc, #584]	; (80005e4 <GPIO_Init+0x2cc>)
 800039a:	400b      	ands	r3, r1
 800039c:	6093      	str	r3, [r2, #8]

		if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d10a      	bne.n	80003bc <GPIO_Init+0xa4>
			// 1. configure the Falling trigger selection register (EXTI_FTSR)
			EXTI->FTSR |= (1 << pinNumber);
 80003a6:	4b8f      	ldr	r3, [pc, #572]	; (80005e4 <GPIO_Init+0x2cc>)
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	7cfa      	ldrb	r2, [r7, #19]
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a8b      	ldr	r2, [pc, #556]	; (80005e4 <GPIO_Init+0x2cc>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	60d3      	str	r3, [r2, #12]
 80003ba:	e026      	b.n	800040a <GPIO_Init+0xf2>

		} else if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b05      	cmp	r3, #5
 80003c2:	d10a      	bne.n	80003da <GPIO_Init+0xc2>
			// 1. configure the Rising trigger selection register (EXTI_RTSR)
			EXTI->RTSR |= (1 << pinNumber);
 80003c4:	4b87      	ldr	r3, [pc, #540]	; (80005e4 <GPIO_Init+0x2cc>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	7cfa      	ldrb	r2, [r7, #19]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a84      	ldr	r2, [pc, #528]	; (80005e4 <GPIO_Init+0x2cc>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6093      	str	r3, [r2, #8]
 80003d8:	e017      	b.n	800040a <GPIO_Init+0xf2>

		} else if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	2b06      	cmp	r3, #6
 80003e0:	d113      	bne.n	800040a <GPIO_Init+0xf2>
			// 1. configure the both Rising and Falling trigger selection register (EXTI_RTSR, EXTI_FTSR)
			EXTI->FTSR |= (1 << pinNumber);
 80003e2:	4b80      	ldr	r3, [pc, #512]	; (80005e4 <GPIO_Init+0x2cc>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	7cfa      	ldrb	r2, [r7, #19]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a7c      	ldr	r2, [pc, #496]	; (80005e4 <GPIO_Init+0x2cc>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pinNumber);
 80003f6:	4b7b      	ldr	r3, [pc, #492]	; (80005e4 <GPIO_Init+0x2cc>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	7cfa      	ldrb	r2, [r7, #19]
 80003fc:	2101      	movs	r1, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a77      	ldr	r2, [pc, #476]	; (80005e4 <GPIO_Init+0x2cc>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]

		}

		// 2. Configure  the GPIO port selection in sys config exti config register SYSCFG_EXTICR

		SYSCFG_PCLK_EN();                                                        // Enable SYSCFG peripheral clock
 800040a:	4b77      	ldr	r3, [pc, #476]	; (80005e8 <GPIO_Init+0x2d0>)
 800040c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040e:	4a76      	ldr	r2, [pc, #472]	; (80005e8 <GPIO_Init+0x2d0>)
 8000410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000414:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t idxToEXTICR = pinNumber/4;                                       // EXTICR contains 4 registers i.e. SYSCFG_RegDef_t.EXTICR[4] with each upper 16bit reserved. 4*4 bit for each EXTIx
 8000416:	7cfb      	ldrb	r3, [r7, #19]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	74bb      	strb	r3, [r7, #18]
		uint8_t idEXTIxBit = pinNumber%4;                                        // EXTIx bit position to be updated for GPIOx mapping into EXTI. Refer 7.2. SYSCFG external interrupt configuration register@reference manual
 800041c:	7cfb      	ldrb	r3, [r7, #19]
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	747b      	strb	r3, [r7, #17]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);           // get port code to be written into EXTICR[x] register to enable configuration of given GPIO pin to EXTIx
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a70      	ldr	r2, [pc, #448]	; (80005ec <GPIO_Init+0x2d4>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d024      	beq.n	8000478 <GPIO_Init+0x160>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a6f      	ldr	r2, [pc, #444]	; (80005f0 <GPIO_Init+0x2d8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d01d      	beq.n	8000474 <GPIO_Init+0x15c>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a6d      	ldr	r2, [pc, #436]	; (80005f4 <GPIO_Init+0x2dc>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d016      	beq.n	8000470 <GPIO_Init+0x158>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a6c      	ldr	r2, [pc, #432]	; (80005f8 <GPIO_Init+0x2e0>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d00f      	beq.n	800046c <GPIO_Init+0x154>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a6a      	ldr	r2, [pc, #424]	; (80005fc <GPIO_Init+0x2e4>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d008      	beq.n	8000468 <GPIO_Init+0x150>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a69      	ldr	r2, [pc, #420]	; (8000600 <GPIO_Init+0x2e8>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d101      	bne.n	8000464 <GPIO_Init+0x14c>
 8000460:	2307      	movs	r3, #7
 8000462:	e00a      	b.n	800047a <GPIO_Init+0x162>
 8000464:	2300      	movs	r3, #0
 8000466:	e008      	b.n	800047a <GPIO_Init+0x162>
 8000468:	2304      	movs	r3, #4
 800046a:	e006      	b.n	800047a <GPIO_Init+0x162>
 800046c:	2303      	movs	r3, #3
 800046e:	e004      	b.n	800047a <GPIO_Init+0x162>
 8000470:	2302      	movs	r3, #2
 8000472:	e002      	b.n	800047a <GPIO_Init+0x162>
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <GPIO_Init+0x162>
 8000478:	2300      	movs	r3, #0
 800047a:	743b      	strb	r3, [r7, #16]

		SYSCFG->EXTICR[idxToEXTICR] = portCode << (idEXTIxBit*4);
 800047c:	7c3a      	ldrb	r2, [r7, #16]
 800047e:	7c7b      	ldrb	r3, [r7, #17]
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa02 f103 	lsl.w	r1, r2, r3
 8000486:	4a5f      	ldr	r2, [pc, #380]	; (8000604 <GPIO_Init+0x2ec>)
 8000488:	7cbb      	ldrb	r3, [r7, #18]
 800048a:	3302      	adds	r3, #2
 800048c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the EXT interrupt delivery using Interrupt mask register
		EXTI->IMR |= (1 << pinNumber);
 8000490:	4b54      	ldr	r3, [pc, #336]	; (80005e4 <GPIO_Init+0x2cc>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	7cfa      	ldrb	r2, [r7, #19]
 8000496:	2101      	movs	r1, #1
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a51      	ldr	r2, [pc, #324]	; (80005e4 <GPIO_Init+0x2cc>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	6013      	str	r3, [r2, #0]
	}


	//2. Configure the speed
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinSpeed << (2*pinNumber);          // Configure respective pin mode field. 2bit per pin hence multiply by 2
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	799b      	ldrb	r3, [r3, #6]
 80004a8:	461a      	mov	r2, r3
 80004aa:	7cfb      	ldrb	r3, [r7, #19]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pinNumber);                        // Reset/clear existing value
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	7cfb      	ldrb	r3, [r7, #19]
 80004bc:	2103      	movs	r1, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	400a      	ands	r2, r1
 80004cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;                                        // write SPEEDR register value to respective GPIO register
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6899      	ldr	r1, [r3, #8]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]


	//3. Configure the pull up/down settings
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinPuPdControl << (2*pinNumber);    // Configure respective pin mode field. 2bit per pin hence multiply by 2
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	79db      	ldrb	r3, [r3, #7]
 80004e6:	461a      	mov	r2, r3
 80004e8:	7cfb      	ldrb	r3, [r7, #19]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pinNumber);                          // Reset/clear existing value
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	7cfb      	ldrb	r3, [r7, #19]
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;                                          // write PUPDR register value to respective GPIO register
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68d9      	ldr	r1, [r3, #12]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]


	//4. Configure the output type
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinOPType << (pinNumber);           // Configure respective pin mode field. 1bit per pin hence multiply by 1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7a1b      	ldrb	r3, [r3, #8]
 8000524:	461a      	mov	r2, r3
 8000526:	7cfb      	ldrb	r3, [r7, #19]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pinNumber);                          // Reset/clear existing value
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	2101      	movs	r1, #1
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	400a      	ands	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;                                         // write OTYPER register value to respective GPIO register
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6859      	ldr	r1, [r3, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	430a      	orrs	r2, r1
 8000556:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]


	//5. Configure the alternate functionality (if required)
	if(pGPIOHandle->GPIO_pinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN) {      // AFRL and AFRH contains Alt function mode in 4 bit per pin.
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7a5b      	ldrb	r3, [r3, #9]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d139      	bne.n	80005d8 <GPIO_Init+0x2c0>

		uint8_t offset = pinNumber % 8;                                          // offset factor within AFRL/AFRH register
 8000564:	7cfb      	ldrb	r3, [r7, #19]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	73fb      	strb	r3, [r7, #15]
		temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinAltFunMode << (4*offset);    // Configure respective pin mode field.  4bit per pin hence multiply by 4
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7a5b      	ldrb	r3, [r3, #9]
 8000570:	461a      	mov	r2, r3
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]

		if(pinNumber <= 7) {
 800057c:	7cfb      	ldrb	r3, [r7, #19]
 800057e:	2b07      	cmp	r3, #7
 8000580:	d815      	bhi.n	80005ae <GPIO_Init+0x296>
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << pinNumber);                   // Reset/clear existing value
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6a1a      	ldr	r2, [r3, #32]
 8000588:	7cfb      	ldrb	r3, [r7, #19]
 800058a:	210f      	movs	r1, #15
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	400a      	ands	r2, r1
 800059a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;                                   // write AFRL register value to respective GPIO register
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a19      	ldr	r1, [r3, #32]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH |= temp;                                   // write AFRH register value to respective GPIO register
		}
	}


}
 80005ac:	e014      	b.n	80005d8 <GPIO_Init+0x2c0>
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << pinNumber);                   // Reset/clear existing value
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	210f      	movs	r1, #15
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;                                   // write AFRH register value to respective GPIO register
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005d8:	bf00      	nop
 80005da:	371c      	adds	r7, #28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40013c00 	.word	0x40013c00
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020800 	.word	0x40020800
 80005f8:	40020c00 	.word	0x40020c00
 80005fc:	40021000 	.word	0x40021000
 8000600:	40021c00 	.word	0x40021c00
 8000604:	40013800 	.word	0x40013800

08000608 <GPIO_ToggleOutputPin>:
/**
 * GPIO_ToggleOutputPin() function toggles output pin value
 * @param pGPIOx        base address of GPIOx peripheral
 * @param pinNumer      pin number of GPIOx port
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<pinNumber);                    // xor the pin value to toggle the output pin
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	78fa      	ldrb	r2, [r7, #3]
 800061a:	2101      	movs	r1, #1
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	405a      	eors	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	615a      	str	r2, [r3, #20]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <GPIO_IRQInterruptConfig>:
 * @param IRQNumber         IRQ number which will be configured for interrupt handling
 * @param enableOrDisable   enable or disable the IRQ associated with GPIO
 * Note: Refer generic Cortex M4 programming manual: 4.3 NVIC (4.3.2 section Interrupt set-enable register x (NVIC_ISERx) and 4.3. Interrupt clear-enable register x (NVIC_ICERx))
 *       Total IRQ no. implemented in STM32F411 is 92
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enableOrDisable){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]

	if(enableOrDisable == ENABLE) {
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d133      	bne.n	80006ae <GPIO_IRQInterruptConfig+0x7e>
        if(IRQNumber<=31) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b1f      	cmp	r3, #31
 800064a:	d80a      	bhi.n	8000662 <GPIO_IRQInterruptConfig+0x32>
        	// program ISER0
        	*NVIC_ISER0 |= (1 << IRQNumber);
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <GPIO_IRQInterruptConfig+0xf0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <GPIO_IRQInterruptConfig+0xf0>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
		 } else if(IRQNumber >= 64 && IRQNumber < 96) {
		    // program ICER2
			 *NVIC_ICER2 |= (1 << (IRQNumber % 32));
		 }
	}
}
 8000660:	e059      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
        } else if(IRQNumber > 31 && IRQNumber < 64) {
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b1f      	cmp	r3, #31
 8000666:	d90f      	bls.n	8000688 <GPIO_IRQInterruptConfig+0x58>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b3f      	cmp	r3, #63	; 0x3f
 800066c:	d80c      	bhi.n	8000688 <GPIO_IRQInterruptConfig+0x58>
        	*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <GPIO_IRQInterruptConfig+0xf4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	f002 021f 	and.w	r2, r2, #31
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <GPIO_IRQInterruptConfig+0xf4>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e046      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
        } else if(IRQNumber >= 64 && IRQNumber < 96) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b3f      	cmp	r3, #63	; 0x3f
 800068c:	d943      	bls.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b5f      	cmp	r3, #95	; 0x5f
 8000692:	d840      	bhi.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
        	*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <GPIO_IRQInterruptConfig+0xf8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a20      	ldr	r2, [pc, #128]	; (8000728 <GPIO_IRQInterruptConfig+0xf8>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	e033      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
		 if(IRQNumber<=31) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b1f      	cmp	r3, #31
 80006b2:	d80a      	bhi.n	80006ca <GPIO_IRQInterruptConfig+0x9a>
			 *NVIC_ICER0 |= (1 << IRQNumber);
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <GPIO_IRQInterruptConfig+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a1a      	ldr	r2, [pc, #104]	; (800072c <GPIO_IRQInterruptConfig+0xfc>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	e025      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
		 } else if(IRQNumber > 31 && IRQNumber < 64) {
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b1f      	cmp	r3, #31
 80006ce:	d90f      	bls.n	80006f0 <GPIO_IRQInterruptConfig+0xc0>
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b3f      	cmp	r3, #63	; 0x3f
 80006d4:	d80c      	bhi.n	80006f0 <GPIO_IRQInterruptConfig+0xc0>
			 *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <GPIO_IRQInterruptConfig+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	f002 021f 	and.w	r2, r2, #31
 80006e0:	2101      	movs	r1, #1
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a11      	ldr	r2, [pc, #68]	; (8000730 <GPIO_IRQInterruptConfig+0x100>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	e012      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
		 } else if(IRQNumber >= 64 && IRQNumber < 96) {
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b3f      	cmp	r3, #63	; 0x3f
 80006f4:	d90f      	bls.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b5f      	cmp	r3, #95	; 0x5f
 80006fa:	d80c      	bhi.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
			 *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <GPIO_IRQInterruptConfig+0x104>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	f002 021f 	and.w	r2, r2, #31
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f202 	lsl.w	r2, r1, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <GPIO_IRQInterruptConfig+0x104>)
 8000710:	430b      	orrs	r3, r1
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	e7ff      	b.n	8000716 <GPIO_IRQInterruptConfig+0xe6>
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000e104 	.word	0xe000e104
 8000728:	e000e108 	.word	0xe000e108
 800072c:	e000e180 	.word	0xe000e180
 8000730:	e000e184 	.word	0xe000e184
 8000734:	e000e188 	.word	0xe000e188

08000738 <GPIO_IRQPriorityConfig>:
 * 3. Calculate offest/section within NVIC_IPRx register
 *    iprxSection = IRQ number % 4 = 5%4 = 1            => NVIC_IPR1[8:16] bit 8-16 holds priority for IRQ5 inNVIC_IPR1 register
 * 4. Update the value to required register by left shifting iprxSection*8 + no. of bits implemented as per microcontroller
 *
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
	// 1. Find IPR register
	uint8_t iprx = IRQNumber / 4;                                             // find NVIC_IPRx register based on IRQ no.
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	75fb      	strb	r3, [r7, #23]
	uint8_t addressOffset = iprx;                                             // offset to be added into base address of NVIC_IPR reg to reach NVIC_IPRx
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	75bb      	strb	r3, [r7, #22]
	uint8_t iprxSection = IRQNumber % 4;                                      // find section within NVIC_IPRx register based on IRQ no.
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	757b      	strb	r3, [r7, #21]

	volatile uint32_t* NVIC_priorityRegAddress = NVIC_PRIORITY_BASE_ADDR;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <GPIO_IRQPriorityConfig+0x54>)
 8000758:	613b      	str	r3, [r7, #16]

	// Calculate shift within section. Since bits[3:0] are not implemented, adjust the no. of times bits needs to shift i.e. extra 4 bit shift within section to avoid writing to bit[3:0]
	uint8_t shiftInSection = (8 * iprxSection) + (8 - NUMBER_OF_PRIORITY_BIT_IMPLEMENTED);
 800075a:	7d7b      	ldrb	r3, [r7, #21]
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3304      	adds	r3, #4
 8000762:	73fb      	strb	r3, [r7, #15]

	// Assign interrupt priority value to NVIC_IPRx register address
	*(NVIC_priorityRegAddress + addressOffset) |=  (IRQPriority << shiftInSection);
 8000764:	7dbb      	ldrb	r3, [r7, #22]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	4413      	add	r3, r2
 800076c:	6819      	ldr	r1, [r3, #0]
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	409a      	lsls	r2, r3
 8000774:	7dbb      	ldrb	r3, [r7, #22]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	6938      	ldr	r0, [r7, #16]
 800077a:	4403      	add	r3, r0
 800077c:	430a      	orrs	r2, r1
 800077e:	601a      	str	r2, [r3, #0]

}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e400 	.word	0xe000e400

08000790 <GPIO_IRQHandling>:
/**
 * GPIO_IRQHandling() gets called to service the GPIO interrupt
 * @param pinNumer          pin number associated with the IRQ for GPIO port's pin
 * Note: This function will get called from EXTI ISR function e.g. void EXTI0_IRQHandler(void).
 */
void GPIO_IRQHandling(uint8_t pinNumber) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pend Register corresponding to the pin number: refer 10.3.6 Pending register (EXTI_PR)
    if(EXTI->PR & (1<<pinNumber)){
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <GPIO_IRQHandling+0x3c>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	2101      	movs	r1, #1
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4013      	ands	r3, r2
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d009      	beq.n	80007c0 <GPIO_IRQHandling+0x30>
    	// Clear the pend register for detected event by setting it 1
    	EXTI->PR |= (1<<pinNumber);
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <GPIO_IRQHandling+0x3c>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a04      	ldr	r2, [pc, #16]	; (80007cc <GPIO_IRQHandling+0x3c>)
 80007bc:	430b      	orrs	r3, r1
 80007be:	6153      	str	r3, [r2, #20]
    }

}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40013c00 	.word	0x40013c00

080007d0 <delaySW>:
#define TRUE              1
#define BUTTON_PRESSED    TRUE
// User Push button: User and Wake-Up button connected to the I/O PA0 of the STM32F411VE. External pull down resistor available.

// software delay for certain fraction of second
void delaySW(void){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

	for(uint32_t i=0; i< 500000/2; ++i);
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e002      	b.n	80007e2 <delaySW+0x12>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <delaySW+0x28>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d9f8      	bls.n	80007dc <delaySW+0xc>
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	0003d08f 	.word	0x0003d08f

080007fc <main>:


int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

	GPIO_Handle_t ledGPIO, buttonGPIO;


	// reset local variables to default initialize to 0
	memset(&ledGPIO,0, sizeof(ledGPIO) );
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	220c      	movs	r2, #12
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f896 	bl	800093c <memset>
	memset(&buttonGPIO,0, sizeof(buttonGPIO) );
 8000810:	463b      	mov	r3, r7
 8000812:	220c      	movs	r2, #12
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f890 	bl	800093c <memset>

	// Configuration for LED connected to GPIO PD12
	ledGPIO.pGPIOx = GPIOD;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <main+0x80>)
 800081e:	60fb      	str	r3, [r7, #12]
	ledGPIO.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_12;          // refer schematic diagram from stm32 Discovery user manual
 8000820:	230c      	movs	r3, #12
 8000822:	743b      	strb	r3, [r7, #16]
	ledGPIO.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_OUT;          // Crucial to set mode to output mode
 8000824:	2301      	movs	r3, #1
 8000826:	747b      	strb	r3, [r7, #17]
	ledGPIO.GPIO_pinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000828:	2300      	movs	r3, #0
 800082a:	753b      	strb	r3, [r7, #20]
	ledGPIO.GPIO_pinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	74bb      	strb	r3, [r7, #18]
	ledGPIO.GPIO_pinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000830:	2300      	movs	r3, #0
 8000832:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD, ENABLE);                     // enable peripheral clock
 8000834:	2101      	movs	r1, #1
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <main+0x80>)
 8000838:	f7ff fcce 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_Init(&ledGPIO); 									  // initialize the gpio for led pin
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fd69 	bl	8000318 <GPIO_Init>

    //-------------------------------------------------------------------------------------------------------------------------------------
	// Configuration for push button connected to GPIO PD5  with GPIO mode interrupt falling edge
	buttonGPIO.pGPIOx = GPIOD;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <main+0x80>)
 8000848:	603b      	str	r3, [r7, #0]
	buttonGPIO.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_5;          // refer schematic diagram from stm32 Discovery user manual. PA0
 800084a:	2305      	movs	r3, #5
 800084c:	713b      	strb	r3, [r7, #4]
	buttonGPIO.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;       // Input mode is set to interrupt falling edge
 800084e:	2304      	movs	r3, #4
 8000850:	717b      	strb	r3, [r7, #5]
	//buttonGPIO.GPIO_pinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;   //  Not applicable
	buttonGPIO.GPIO_pinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000852:	2302      	movs	r3, #2
 8000854:	71bb      	strb	r3, [r7, #6]
	buttonGPIO.GPIO_pinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;    // external pull up configuration
 8000856:	2301      	movs	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]


	GPIO_PeriClockControl(GPIOD, ENABLE);                           // enable peripheral clock
 800085a:	2101      	movs	r1, #1
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <main+0x80>)
 800085e:	f7ff fcbb 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_Init(&buttonGPIO);
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fd57 	bl	8000318 <GPIO_Init>

	// configure IRQ
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800086a:	2101      	movs	r1, #1
 800086c:	2017      	movs	r0, #23
 800086e:	f7ff fedf 	bl	8000630 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI_15);
 8000872:	210f      	movs	r1, #15
 8000874:	2017      	movs	r0, #23
 8000876:	f7ff ff5f 	bl	8000738 <GPIO_IRQPriorityConfig>

	for(;;);
 800087a:	e7fe      	b.n	800087a <main+0x7e>
 800087c:	40020c00 	.word	0x40020c00

08000880 <EXTI9_5_IRQHandler>:
}

/* Implementation of IRQ handler*/
void EXTI9_5_IRQHandler(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	delaySW();                               // To avoid de-bouncing of button, add delay for ~100ms.
 8000884:	f7ff ffa4 	bl	80007d0 <delaySW>
	GPIO_IRQHandling(GPIO_PIN_5);
 8000888:	2005      	movs	r0, #5
 800088a:	f7ff ff81 	bl	8000790 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12);
 800088e:	210c      	movs	r1, #12
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <EXTI9_5_IRQHandler+0x1c>)
 8000892:	f7ff feb9 	bl	8000608 <GPIO_ToggleOutputPin>

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f000 f811 	bl	80008f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff ff93 	bl	80007fc <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008e4:	0800096c 	.word	0x0800096c
  ldr r2, =_sbss
 80008e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008ec:	2000001c 	.word	0x2000001c

080008f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <__libc_init_array>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4d0d      	ldr	r5, [pc, #52]	; (800092c <__libc_init_array+0x38>)
 80008f8:	4c0d      	ldr	r4, [pc, #52]	; (8000930 <__libc_init_array+0x3c>)
 80008fa:	1b64      	subs	r4, r4, r5
 80008fc:	10a4      	asrs	r4, r4, #2
 80008fe:	2600      	movs	r6, #0
 8000900:	42a6      	cmp	r6, r4
 8000902:	d109      	bne.n	8000918 <__libc_init_array+0x24>
 8000904:	4d0b      	ldr	r5, [pc, #44]	; (8000934 <__libc_init_array+0x40>)
 8000906:	4c0c      	ldr	r4, [pc, #48]	; (8000938 <__libc_init_array+0x44>)
 8000908:	f000 f820 	bl	800094c <_init>
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	2600      	movs	r6, #0
 8000912:	42a6      	cmp	r6, r4
 8000914:	d105      	bne.n	8000922 <__libc_init_array+0x2e>
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f855 3b04 	ldr.w	r3, [r5], #4
 800091c:	4798      	blx	r3
 800091e:	3601      	adds	r6, #1
 8000920:	e7ee      	b.n	8000900 <__libc_init_array+0xc>
 8000922:	f855 3b04 	ldr.w	r3, [r5], #4
 8000926:	4798      	blx	r3
 8000928:	3601      	adds	r6, #1
 800092a:	e7f2      	b.n	8000912 <__libc_init_array+0x1e>
 800092c:	08000964 	.word	0x08000964
 8000930:	08000964 	.word	0x08000964
 8000934:	08000964 	.word	0x08000964
 8000938:	08000968 	.word	0x08000968

0800093c <memset>:
 800093c:	4402      	add	r2, r0
 800093e:	4603      	mov	r3, r0
 8000940:	4293      	cmp	r3, r2
 8000942:	d100      	bne.n	8000946 <memset+0xa>
 8000944:	4770      	bx	lr
 8000946:	f803 1b01 	strb.w	r1, [r3], #1
 800094a:	e7f9      	b.n	8000940 <memset+0x4>

0800094c <_init>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr

08000958 <_fini>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr
