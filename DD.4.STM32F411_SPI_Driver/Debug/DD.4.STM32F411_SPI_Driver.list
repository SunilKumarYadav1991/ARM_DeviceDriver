
DD.4.STM32F411_SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00010a74  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00010a74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a74  00010a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a74  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010a74  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000121d  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003be  00000000  00000000  00011cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00012080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  000121b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002051  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001600  00000000  00000000  00014321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008db5  00000000  00000000  00015921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e6d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000042c  00000000  00000000  0001e728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a48 	.word	0x08000a48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a48 	.word	0x08000a48

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <GPIO_PeriClockControl>:
/**
 * GPIO_PeriClockControl() function enables or disables peripheral clock for given GPIO port
 * @param pGPIOx            base address of GPIO peripheral
 * @param enableOrDisable   boolean 1 to enable/set and 0 to disable/reset
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enableOrDisable){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]

	if(enableOrDisable== ENABLE) {
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d141      	bne.n	800027e <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a43      	ldr	r2, [pc, #268]	; (800030c <GPIO_PeriClockControl+0x124>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b43      	ldr	r3, [pc, #268]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a42      	ldr	r2, [pc, #264]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
			// wrong port address
		}

	}

}
 800020e:	e077      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a40      	ldr	r2, [pc, #256]	; (8000314 <GPIO_PeriClockControl+0x12c>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a3c      	ldr	r2, [pc, #240]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e06c      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a3b      	ldr	r2, [pc, #236]	; (8000318 <GPIO_PeriClockControl+0x130>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b38      	ldr	r3, [pc, #224]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a37      	ldr	r2, [pc, #220]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e061      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a37      	ldr	r2, [pc, #220]	; (800031c <GPIO_PeriClockControl+0x134>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b32      	ldr	r3, [pc, #200]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a31      	ldr	r2, [pc, #196]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e056      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a32      	ldr	r2, [pc, #200]	; (8000320 <GPIO_PeriClockControl+0x138>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a2c      	ldr	r2, [pc, #176]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e04b      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <GPIO_PeriClockControl+0x13c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d147      	bne.n	8000300 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a26      	ldr	r2, [pc, #152]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e040      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a22      	ldr	r2, [pc, #136]	; (800030c <GPIO_PeriClockControl+0x124>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a21      	ldr	r2, [pc, #132]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800028c:	f023 0301 	bic.w	r3, r3, #1
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e035      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a1f      	ldr	r2, [pc, #124]	; (8000314 <GPIO_PeriClockControl+0x12c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002a2:	f023 0302 	bic.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e02a      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <GPIO_PeriClockControl+0x130>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002b8:	f023 0304 	bic.w	r3, r3, #4
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e01f      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a16      	ldr	r2, [pc, #88]	; (800031c <GPIO_PeriClockControl+0x134>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002ce:	f023 0308 	bic.w	r3, r3, #8
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e014      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <GPIO_PeriClockControl+0x138>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002e4:	f023 0310 	bic.w	r3, r3, #16
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e009      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <GPIO_PeriClockControl+0x13c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d105      	bne.n	8000300 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40020000 	.word	0x40020000
 8000310:	40023800 	.word	0x40023800
 8000314:	40020400 	.word	0x40020400
 8000318:	40020800 	.word	0x40020800
 800031c:	40020c00 	.word	0x40020c00
 8000320:	40021000 	.word	0x40021000
 8000324:	40021c00 	.word	0x40021c00

08000328 <GPIO_Init>:
 * GPIO_Init() function initializes the GPIO port with respective mode
 * @param pGPIOHandle      GPIO handle with base address to GPIO with respective mode
 *
 * TODO: Interrupt mode implementation pending
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);                        // Initializing/Enabling clock to attached peripheral bus
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff54 	bl	80001e8 <GPIO_PeriClockControl>

	uint8_t pinNumber = pGPIOHandle->GPIO_pinConfig.GPIO_PinNumber;             // pin number of port for which initialization is required
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	791b      	ldrb	r3, [r3, #4]
 8000344:	74fb      	strb	r3, [r7, #19]

	//1. Configure the mode of gpio pin: focusing on non interrupt modes as of now
	if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode <= GPIO_MODE_AALOG) {           // non interrupt mode.
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	795b      	ldrb	r3, [r3, #5]
 800034a:	2b03      	cmp	r3, #3
 800034c:	d81f      	bhi.n	800038e <GPIO_Init+0x66>

		temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinMode << (2*pinNumber);      // Configure respective pin mode field.  2bit per pin hence multiply by 2
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	795b      	ldrb	r3, [r3, #5]
 8000352:	461a      	mov	r2, r3
 8000354:	7cfb      	ldrb	r3, [r7, #19]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa02 f303 	lsl.w	r3, r2, r3
 800035c:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pinNumber);                     // Reset/clear existing value
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	7cfb      	ldrb	r3, [r7, #19]
 8000366:	2103      	movs	r1, #3
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	43db      	mvns	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	400a      	ands	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;                                     // write MODER register value to respective GPIO register
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	430a      	orrs	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e098      	b.n	80004c0 <GPIO_Init+0x198>
	} else {

		// clear rising and falling trigger selection register before setting them.
		EXTI->FTSR &= ~(1 << pinNumber);
 800038e:	4b9b      	ldr	r3, [pc, #620]	; (80005fc <GPIO_Init+0x2d4>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	7cfa      	ldrb	r2, [r7, #19]
 8000394:	2101      	movs	r1, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	43d2      	mvns	r2, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a97      	ldr	r2, [pc, #604]	; (80005fc <GPIO_Init+0x2d4>)
 80003a0:	400b      	ands	r3, r1
 80003a2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 80003a4:	4b95      	ldr	r3, [pc, #596]	; (80005fc <GPIO_Init+0x2d4>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	7cfa      	ldrb	r2, [r7, #19]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a91      	ldr	r2, [pc, #580]	; (80005fc <GPIO_Init+0x2d4>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6093      	str	r3, [r2, #8]

		if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d10a      	bne.n	80003d8 <GPIO_Init+0xb0>
			// 1. configure the Falling trigger selection register (EXTI_FTSR)
			EXTI->FTSR |= (1 << pinNumber);
 80003c2:	4b8e      	ldr	r3, [pc, #568]	; (80005fc <GPIO_Init+0x2d4>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	7cfa      	ldrb	r2, [r7, #19]
 80003c8:	2101      	movs	r1, #1
 80003ca:	fa01 f202 	lsl.w	r2, r1, r2
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a8a      	ldr	r2, [pc, #552]	; (80005fc <GPIO_Init+0x2d4>)
 80003d2:	430b      	orrs	r3, r1
 80003d4:	60d3      	str	r3, [r2, #12]
 80003d6:	e026      	b.n	8000426 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b05      	cmp	r3, #5
 80003de:	d10a      	bne.n	80003f6 <GPIO_Init+0xce>
			// 1. configure the Rising trigger selection register (EXTI_RTSR)
			EXTI->RTSR |= (1 << pinNumber);
 80003e0:	4b86      	ldr	r3, [pc, #536]	; (80005fc <GPIO_Init+0x2d4>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	7cfa      	ldrb	r2, [r7, #19]
 80003e6:	2101      	movs	r1, #1
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a83      	ldr	r2, [pc, #524]	; (80005fc <GPIO_Init+0x2d4>)
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6093      	str	r3, [r2, #8]
 80003f4:	e017      	b.n	8000426 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d113      	bne.n	8000426 <GPIO_Init+0xfe>
			// 1. configure the both Rising and Falling trigger selection register (EXTI_RTSR, EXTI_FTSR)
			EXTI->FTSR |= (1 << pinNumber);
 80003fe:	4b7f      	ldr	r3, [pc, #508]	; (80005fc <GPIO_Init+0x2d4>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	7cfa      	ldrb	r2, [r7, #19]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	4611      	mov	r1, r2
 800040c:	4a7b      	ldr	r2, [pc, #492]	; (80005fc <GPIO_Init+0x2d4>)
 800040e:	430b      	orrs	r3, r1
 8000410:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pinNumber);
 8000412:	4b7a      	ldr	r3, [pc, #488]	; (80005fc <GPIO_Init+0x2d4>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	7cfa      	ldrb	r2, [r7, #19]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a76      	ldr	r2, [pc, #472]	; (80005fc <GPIO_Init+0x2d4>)
 8000422:	430b      	orrs	r3, r1
 8000424:	6093      	str	r3, [r2, #8]

		}

		// 2. Configure  the GPIO port selection in sys config exti config register SYSCFG_EXTICR

		SYSCFG_PCLK_EN();                                                        // Enable SYSCFG peripheral clock
 8000426:	4b76      	ldr	r3, [pc, #472]	; (8000600 <GPIO_Init+0x2d8>)
 8000428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042a:	4a75      	ldr	r2, [pc, #468]	; (8000600 <GPIO_Init+0x2d8>)
 800042c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000430:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t idxToEXTICR = pinNumber/4;                                       // EXTICR contains 4 registers i.e. SYSCFG_RegDef_t.EXTICR[4] with each upper 16bit reserved. 4*4 bit for each EXTIx
 8000432:	7cfb      	ldrb	r3, [r7, #19]
 8000434:	089b      	lsrs	r3, r3, #2
 8000436:	74bb      	strb	r3, [r7, #18]
		uint8_t idEXTIxBit = pinNumber%4;                                        // EXTIx bit position to be updated for GPIOx mapping into EXTI. Refer 7.2. SYSCFG external interrupt configuration register@reference manual
 8000438:	7cfb      	ldrb	r3, [r7, #19]
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	747b      	strb	r3, [r7, #17]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);           // get port code to be written into EXTICR[x] register to enable configuration of given GPIO pin to EXTIx
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a6f      	ldr	r2, [pc, #444]	; (8000604 <GPIO_Init+0x2dc>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d024      	beq.n	8000494 <GPIO_Init+0x16c>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a6e      	ldr	r2, [pc, #440]	; (8000608 <GPIO_Init+0x2e0>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d01d      	beq.n	8000490 <GPIO_Init+0x168>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a6c      	ldr	r2, [pc, #432]	; (800060c <GPIO_Init+0x2e4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d016      	beq.n	800048c <GPIO_Init+0x164>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a6b      	ldr	r2, [pc, #428]	; (8000610 <GPIO_Init+0x2e8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d00f      	beq.n	8000488 <GPIO_Init+0x160>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a69      	ldr	r2, [pc, #420]	; (8000614 <GPIO_Init+0x2ec>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d008      	beq.n	8000484 <GPIO_Init+0x15c>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a68      	ldr	r2, [pc, #416]	; (8000618 <GPIO_Init+0x2f0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d101      	bne.n	8000480 <GPIO_Init+0x158>
 800047c:	2307      	movs	r3, #7
 800047e:	e00a      	b.n	8000496 <GPIO_Init+0x16e>
 8000480:	2300      	movs	r3, #0
 8000482:	e008      	b.n	8000496 <GPIO_Init+0x16e>
 8000484:	2304      	movs	r3, #4
 8000486:	e006      	b.n	8000496 <GPIO_Init+0x16e>
 8000488:	2303      	movs	r3, #3
 800048a:	e004      	b.n	8000496 <GPIO_Init+0x16e>
 800048c:	2302      	movs	r3, #2
 800048e:	e002      	b.n	8000496 <GPIO_Init+0x16e>
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <GPIO_Init+0x16e>
 8000494:	2300      	movs	r3, #0
 8000496:	743b      	strb	r3, [r7, #16]

		SYSCFG->EXTICR[idxToEXTICR] = portCode << (idEXTIxBit*4);
 8000498:	7c3a      	ldrb	r2, [r7, #16]
 800049a:	7c7b      	ldrb	r3, [r7, #17]
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	fa02 f103 	lsl.w	r1, r2, r3
 80004a2:	4a5e      	ldr	r2, [pc, #376]	; (800061c <GPIO_Init+0x2f4>)
 80004a4:	7cbb      	ldrb	r3, [r7, #18]
 80004a6:	3302      	adds	r3, #2
 80004a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the EXT interrupt delivery using Interrupt mask register
		EXTI->IMR |= (1 << pinNumber);
 80004ac:	4b53      	ldr	r3, [pc, #332]	; (80005fc <GPIO_Init+0x2d4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	7cfa      	ldrb	r2, [r7, #19]
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a50      	ldr	r2, [pc, #320]	; (80005fc <GPIO_Init+0x2d4>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6013      	str	r3, [r2, #0]
	}


	//2. Configure the speed
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinSpeed << (2*pinNumber);          // Configure respective pin mode field. 2bit per pin hence multiply by 2
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	461a      	mov	r2, r3
 80004c6:	7cfb      	ldrb	r3, [r7, #19]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pinNumber);                        // Reset/clear existing value
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	7cfb      	ldrb	r3, [r7, #19]
 80004d8:	2103      	movs	r1, #3
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	43db      	mvns	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	400a      	ands	r2, r1
 80004e8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;                                        // write SPEEDR register value to respective GPIO register
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6899      	ldr	r1, [r3, #8]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]


	//3. Configure the pull up/down settings
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinPuPdControl << (2*pinNumber);    // Configure respective pin mode field. 2bit per pin hence multiply by 2
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	79db      	ldrb	r3, [r3, #7]
 8000502:	461a      	mov	r2, r3
 8000504:	7cfb      	ldrb	r3, [r7, #19]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pinNumber);                          // Reset/clear existing value
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	7cfb      	ldrb	r3, [r7, #19]
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;                                          // write PUPDR register value to respective GPIO register
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	68d9      	ldr	r1, [r3, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]


	//4. Configure the output type
	temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinOPType << (pinNumber);           // Configure respective pin mode field. 1bit per pin hence multiply by 1
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	461a      	mov	r2, r3
 8000542:	7cfb      	ldrb	r3, [r7, #19]
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pinNumber);                          // Reset/clear existing value
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	7cfb      	ldrb	r3, [r7, #19]
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	400a      	ands	r2, r1
 8000562:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;                                         // write OTYPER register value to respective GPIO register
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6859      	ldr	r1, [r3, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	430a      	orrs	r2, r1
 8000572:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]


	//5. Configure the alternate functionality (if required)
	if(pGPIOHandle->GPIO_pinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN) {      // AFRL and AFRH contains Alt function mode in 4 bit per pin.
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7a5b      	ldrb	r3, [r3, #9]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d139      	bne.n	80005f4 <GPIO_Init+0x2cc>

		uint8_t offset = pinNumber % 8;                                          // offset factor within AFRL/AFRH register
 8000580:	7cfb      	ldrb	r3, [r7, #19]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	73fb      	strb	r3, [r7, #15]
		temp =  pGPIOHandle->GPIO_pinConfig.GPIO_PinAltFunMode << (4*offset);    // Configure respective pin mode field.  4bit per pin hence multiply by 4
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7a5b      	ldrb	r3, [r3, #9]
 800058c:	461a      	mov	r2, r3
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]

		if(pinNumber <= 7) {
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d815      	bhi.n	80005ca <GPIO_Init+0x2a2>
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << pinNumber);                   // Reset/clear existing value
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a1a      	ldr	r2, [r3, #32]
 80005a4:	7cfb      	ldrb	r3, [r7, #19]
 80005a6:	210f      	movs	r1, #15
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;                                   // write AFRL register value to respective GPIO register
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6a19      	ldr	r1, [r3, #32]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH |= temp;                                   // write AFRH register value to respective GPIO register
		}
	}


}
 80005c8:	e014      	b.n	80005f4 <GPIO_Init+0x2cc>
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << pinNumber);                   // Reset/clear existing value
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	210f      	movs	r1, #15
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;                                   // write AFRH register value to respective GPIO register
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40013c00 	.word	0x40013c00
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40021000 	.word	0x40021000
 8000618:	40021c00 	.word	0x40021c00
 800061c:	40013800 	.word	0x40013800

08000620 <SPI_PeriClockControl>:
/**
 * SPI_PeriClockControl() function enables or disables peripheral clock for given SPI x peripheral
 * @param pSPIx             base address of SPIx peripheral
 * @param enableOrDisable   boolean 1 to enable/set and 0 to disable/reset
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enableOrDisable) {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]

	if(enableOrDisable== ENABLE) {
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d136      	bne.n	80006a0 <SPI_PeriClockControl+0x80>
			if(pSPIx == SPI1) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a38      	ldr	r2, [pc, #224]	; (8000718 <SPI_PeriClockControl+0xf8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <SPI_PeriClockControl+0xfc>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a37      	ldr	r2, [pc, #220]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
				// wrong port address
			}

		}

}
 8000646:	e061      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a35      	ldr	r2, [pc, #212]	; (8000720 <SPI_PeriClockControl+0x100>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000650:	4b32      	ldr	r3, [pc, #200]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800065c:	e056      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI3) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <SPI_PeriClockControl+0x104>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <SPI_PeriClockControl+0xfc>)
 800066c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000672:	e04b      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI4) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <SPI_PeriClockControl+0x108>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <SPI_PeriClockControl+0x6a>
				SPI4_PCLK_EN();
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SPI_PeriClockControl+0xfc>)
 800067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000686:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000688:	e040      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI5) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SPI_PeriClockControl+0x10c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d13c      	bne.n	800070c <SPI_PeriClockControl+0xec>
				SPI5_PCLK_EN();
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800069e:	e035      	b.n	800070c <SPI_PeriClockControl+0xec>
			if(pSPIx == SPI1) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <SPI_PeriClockControl+0xf8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <SPI_PeriClockControl+0x96>
				SPI1_PCLK_DI();
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006b2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006b4:	e02a      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI2) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <SPI_PeriClockControl+0x100>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <SPI_PeriClockControl+0xac>
				SPI2_PCLK_DI();
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ca:	e01f      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI3) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <SPI_PeriClockControl+0x104>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <SPI_PeriClockControl+0xc2>
				SPI3_PCLK_DI();
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006e0:	e014      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI4) {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <SPI_PeriClockControl+0x108>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <SPI_PeriClockControl+0xd8>
				SPI4_PCLK_DI();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <SPI_PeriClockControl+0xfc>)
 80006f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006f4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006f6:	e009      	b.n	800070c <SPI_PeriClockControl+0xec>
			} else if (pSPIx == SPI5) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <SPI_PeriClockControl+0x10c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d105      	bne.n	800070c <SPI_PeriClockControl+0xec>
				SPI5_PCLK_DI();
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000704:	4a05      	ldr	r2, [pc, #20]	; (800071c <SPI_PeriClockControl+0xfc>)
 8000706:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800070a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40013000 	.word	0x40013000
 800071c:	40023800 	.word	0x40023800
 8000720:	40003800 	.word	0x40003800
 8000724:	40003c00 	.word	0x40003c00
 8000728:	40013400 	.word	0x40013400
 800072c:	40015000 	.word	0x40015000

08000730 <SPI_Init>:
/**
 * SPI_Init() function initializes the given SPI x peripheral
 * @param pSPIHandle            handle/structure to SPI peripheral containing configuration
 * TODO: Replace register's bit position with macro
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	// Configure  the CPI_CR1 register

	uint32_t tempReg = 0;            // temp variable holding register values
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]


	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);                           // Enabling the clock to bus where SPI peripherals are attached.
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff6c 	bl	8000620 <SPI_PeriClockControl>

	// 1. configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]

	// 2. configure the bug config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d104      	bne.n	8000768 <SPI_Init+0x38>
		// BIDI MODE bit should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDI_MODE);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e014      	b.n	8000792 <SPI_Init+0x62>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d104      	bne.n	800077a <SPI_Init+0x4a>
		// BIDI MODE bit should be set
		tempReg |= (1 << SPI_CR1_BIDI_MODE);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e00b      	b.n	8000792 <SPI_Init+0x62>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d107      	bne.n	8000792 <SPI_Init+0x62>
		// BIDI MODE bit should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000788:	60fb      	str	r3, [r7, #12]

		// RX ONLY bit should be set
		tempReg |= (1 << SPI_CR1_RX_ONLY);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000790:	60fb      	str	r3, [r7, #12]

	}

	// 3. Configure the SPI serial clock speed i.e. baud rate
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	799b      	ldrb	r3, [r3, #6]
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	461a      	mov	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4313      	orrs	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]

	// 4. Configure the DFF i.e. Data Frame Format
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	79db      	ldrb	r3, [r3, #7]
 80007a4:	02db      	lsls	r3, r3, #11
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7a1b      	ldrb	r3, [r3, #8]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7a5b      	ldrb	r3, [r3, #9]
 80007c0:	461a      	mov	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]

    //----------------------------------------------------------------------------------------

	// Assign collected settings/values to CR register
	pSPIHandle->pSPIx->CR1 = tempReg;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	601a      	str	r2, [r3, #0]

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SPI_GetFlagStatus>:
 * SPI_GetFlagStatus() helper function to get status register values.
 * @param pSPIx             base address of SPIx peripheral
 * @param flagName          name aka SR bit position state check required
 * @param return            status either SET or RESET
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]


	if (pSPIx->SR & (1 << flagName))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2101      	movs	r1, #1
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SPI_GetFlagStatus+0x20>
		return FLAG_SET;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <SPI_GetFlagStatus+0x22>
	return FLAG_RESET;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SPI_SendData>:
 * SPI_SendData() function sends given number of byte.
 * @param pSPIx             base address of SPIx peripheral
 * @param pTxBuffer         address to buffer containing data to be sent
 * @param length            length of TxBuffer to be sent
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t length) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]

	while(length > 0){
 8000810:	e024      	b.n	800085c <SPI_SendData+0x58>
		// 1. wait until TX buffer empty SR set.
		while(SPI_GetFlagStatus(pSPIx, SPI_SR_TXE) == FLAG_RESET);
 8000812:	bf00      	nop
 8000814:	2101      	movs	r1, #1
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff ffde 	bl	80007d8 <SPI_GetFlagStatus>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f8      	beq.n	8000814 <SPI_SendData+0x10>

		// 2. check the DFF bit in CR1
		if( pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00b      	beq.n	8000846 <SPI_SendData+0x42>
			// Load the 16bit data in to the Data Register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	60da      	str	r2, [r3, #12]
			length -= 2;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b02      	subs	r3, #2
 800083c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;                            /* Increment the pointer to point next block of 16bit data  */
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3301      	adds	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	e00a      	b.n	800085c <SPI_SendData+0x58>

		} else {
			// Load the 8bit data in to the Data Register
			pSPIx->DR = *pTxBuffer;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	60da      	str	r2, [r3, #12]
			length -= 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
			pTxBuffer++;				                      /* Increment the pointer to point next block of 8bit data*/
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
	while(length > 0){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1d7      	bne.n	8000812 <SPI_SendData+0xe>
		}

	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SPI_PeripheralControl>:
 * SPI_PeripheralControl() function enables or disables SPI peripheral.
 * @param pSPIx             base address of SPIx peripheral
 * @param enableOrDisable   boolean 1 to enable/set and 0 to disable/reset
 * Remark: Setting up SPI peripheral requires SPE bit to set 0 and set 1 to apply the changes
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIOx, uint8_t enableOrDisable) {
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]


	if(enableOrDisable == ENABLE) {
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d10c      	bne.n	8000898 <SPI_PeripheralControl+0x2c>
		pSPIOx->CR2 |= (1 << SPI_CR2_SSOE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f043 0204 	orr.w	r2, r3, #4
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	605a      	str	r2, [r3, #4]
		pSPIOx->CR1 |= (1 << SPI_CR1_SPE);           // causes MODF exception. Refer https://github.com/libopencm3/libopencm3/issues/232
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
	} else {
		pSPIOx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000896:	e005      	b.n	80008a4 <SPI_PeripheralControl+0x38>
		pSPIOx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <SPI_SSIConfig>:

// Note: SSI bit influence NSS state when SSM=1. By default SSI=0, wo NSS will be pulled low which is not acceptable for Master when working in non multi master situaation.
void SPI_SSIConfig(SPI_RegDef_t *pSPIOx, uint8_t enableOrDisable) {
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70fb      	strb	r3, [r7, #3]

	if(enableOrDisable == ENABLE) {
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d106      	bne.n	80008ce <SPI_SSIConfig+0x20>
		pSPIOx->CR1 |= (1 << SPI_CR1_SSI);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	601a      	str	r2, [r3, #0]
	} else {
		pSPIOx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 80008cc:	e005      	b.n	80008da <SPI_SSIConfig+0x2c>
		pSPIOx->CR1 &= ~(1 << SPI_CR1_SSI);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <SPI2_GPIOInit>:

/**
 * SPI2_GPIOInit() helper function to initialize the GPIO used for SPI testing.
 * Remark: Using SPI2 as reference
 */
void SPI2_GPIOInit(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIpins;

	SPIpins.pGPIOx = GPIOB;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <SPI2_GPIOInit+0x40>)
 80008ec:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;          // using pin for SPI functionality
 80008ee:	2302      	movs	r3, #2
 80008f0:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_pinConfig.GPIO_PinAltFunMode = 5;                  /*  Alternate functionality Mode : AF05*/
 80008f2:	2305      	movs	r3, #5
 80008f4:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_pinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80008f6:	2300      	movs	r3, #0
 80008f8:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_pinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80008fa:	2300      	movs	r3, #0
 80008fc:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_pinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008fe:	2302      	movs	r3, #2
 8000900:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIpins.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000902:	230d      	movs	r3, #13
 8000904:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd0d 	bl	8000328 <GPIO_Init>

	// MISO
	SPIpins.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800090e:	230e      	movs	r3, #14
 8000910:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fd07 	bl	8000328 <GPIO_Init>

	// NSS
	SPIpins.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_12;
	GPIO_Init(&SPIpins);
	*/
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020400 	.word	0x40020400

08000928 <SPI2_Init>:


/**
 * SPI2_Init() helper function to initialize the SPI2.
 */
void SPI2_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <SPI2_Init+0x38>)
 8000930:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000932:	2301      	movs	r3, #1
 8000934:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000936:	2301      	movs	r3, #1
 8000938:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLOCK_SPEED_DIV2;
 800093a:	2300      	movs	r3, #0
 800093c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800093e:	2300      	movs	r3, #0
 8000940:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;                      // since no slave device at testing phase, enabling SSM for NSS pin
 800094a:	2301      	movs	r3, #1
 800094c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff feed 	bl	8000730 <SPI_Init>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40003800 	.word	0x40003800

08000964 <main>:


int main() {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

	// SPI TX testing

	char message[] = "Hello world";
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <main+0x40>)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000970:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI2_GPIOInit();                                                // Initialize the SPI2 GPIO pin
 8000974:	f7ff ffb6 	bl	80008e4 <SPI2_GPIOInit>
	SPI2_Init();                                                    // Initializes the SPI relevant parameters for SPI2. Note when SPI is disabled, only then cofig can work
 8000978:	f7ff ffd6 	bl	8000928 <SPI2_Init>

	SPI_SSIConfig(SPI2, ENABLE);                                    // sets NSS signal to high i.e. VDD internally to avoid MODF error
 800097c:	2101      	movs	r1, #1
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <main+0x44>)
 8000980:	f7ff ff95 	bl	80008ae <SPI_SSIConfig>

	SPI_PeripheralControl(SPI2, ENABLE);                            // enable the SPI2 peripheral
 8000984:	2101      	movs	r1, #1
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <main+0x44>)
 8000988:	f7ff ff70 	bl	800086c <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)message, strlen(message));         // send string data
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc22 	bl	80001d8 <strlen>
 8000994:	4602      	mov	r2, r0
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4803      	ldr	r0, [pc, #12]	; (80009a8 <main+0x44>)
 800099c:	f7ff ff32 	bl	8000804 <SPI_SendData>

	while(1);
 80009a0:	e7fe      	b.n	80009a0 <main+0x3c>
 80009a2:	bf00      	nop
 80009a4:	08000a60 	.word	0x08000a60
 80009a8:	40003800 	.word	0x40003800

080009ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009da:	f000 f811 	bl	8000a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff ffc1 	bl	8000964 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   r0, =_estack
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009f0:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80009f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009f8:	2000001c 	.word	0x2000001c

080009fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <__libc_init_array>:
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4d0d      	ldr	r5, [pc, #52]	; (8000a38 <__libc_init_array+0x38>)
 8000a04:	4c0d      	ldr	r4, [pc, #52]	; (8000a3c <__libc_init_array+0x3c>)
 8000a06:	1b64      	subs	r4, r4, r5
 8000a08:	10a4      	asrs	r4, r4, #2
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d109      	bne.n	8000a24 <__libc_init_array+0x24>
 8000a10:	4d0b      	ldr	r5, [pc, #44]	; (8000a40 <__libc_init_array+0x40>)
 8000a12:	4c0c      	ldr	r4, [pc, #48]	; (8000a44 <__libc_init_array+0x44>)
 8000a14:	f000 f818 	bl	8000a48 <_init>
 8000a18:	1b64      	subs	r4, r4, r5
 8000a1a:	10a4      	asrs	r4, r4, #2
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	42a6      	cmp	r6, r4
 8000a20:	d105      	bne.n	8000a2e <__libc_init_array+0x2e>
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a28:	4798      	blx	r3
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	e7ee      	b.n	8000a0c <__libc_init_array+0xc>
 8000a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a32:	4798      	blx	r3
 8000a34:	3601      	adds	r6, #1
 8000a36:	e7f2      	b.n	8000a1e <__libc_init_array+0x1e>
 8000a38:	08000a6c 	.word	0x08000a6c
 8000a3c:	08000a6c 	.word	0x08000a6c
 8000a40:	08000a6c 	.word	0x08000a6c
 8000a44:	08000a70 	.word	0x08000a70

08000a48 <_init>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	bf00      	nop
 8000a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4e:	bc08      	pop	{r3}
 8000a50:	469e      	mov	lr, r3
 8000a52:	4770      	bx	lr

08000a54 <_fini>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr
